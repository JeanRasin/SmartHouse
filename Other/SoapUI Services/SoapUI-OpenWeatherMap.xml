<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="a13adcd9-81ca-4c98-9df5-b88ea11ad278" activeEnvironment="Default" name="OpenWeatherMap" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="0211abb4-6035-4f20-9497-c74ab4080861" port="5412" path="/" host="DESKTOP-9N46IGL" name="REST MockOpenWeatherMap Service" docroot=""><con:settings/><con:properties/><con:restMockAction name="/data/2.5/" method="GET" resourcePath="/data/2.5/" id="7430fff6-505b-49e7-b943-01b4da8f1800"><con:settings/><con:defaultResponse>Response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response" id="3a7a06ec-cdff-4ad3-a71d-ab919cd4af80" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
   "coord":{
      "lon":56.29,
      "lat":58.02
   },
   "weather":[
      {
         "id":600,
         "main":"Snow",
         "description":"light snow",
         "icon":"13n"
      },
      {
         "id":701,
         "main":"Mist",
         "description":"mist",
         "icon":"50n"
      }
   ],
   "base":"stations",
   "main":{
      "temp":-1,
      "feels_like":-5.23,
      "temp_min":-1,
      "temp_max":-1,
      "pressure":977,
      "humidity":100
   },
   "visibility":4700,
   "wind":{
      "speed":300,
      "deg":290
   },
   "clouds":{
      "all":75
   },
   "dt":1579718700,
   "sys":{
      "type":1,
      "id":8984,
      "country":"RU",
      "sunrise":1579667945,
      "sunset":1579695178
   },
   "timezone":18000,
   "id":511196,
   "name":"Perm",
   "cod":200
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>