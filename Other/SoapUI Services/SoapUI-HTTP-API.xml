<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="2cab5545-3d34-45bc-b1d9-f9618beefa86" activeEnvironment="Default" name="API" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="3e23dacd-e6e7-4f27-a5f1-f60b0574c741" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:55673" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://DESKTOP-9N46IGL:8089/</con:endpoint><con:endpoint>http://localhost:55673</con:endpoint></con:endpoints><con:resource name="Weather" path="/api/weather" id="8c57cefb-4fb1-4955-ae35-1d3f6b0732c7"><con:settings/><con:parameters/><con:method name="Weather" id="0416f39d-dc8e-4494-b5bc-f7c9e186840d" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/problem+json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:weat="http://localhost/api/weather">weat:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request" id="b477c21f-b979-4c6a-9993-dfcc8482f625" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/weather</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="Goal get" path="/api/goal" id="bf6d8677-e7d6-4c38-9d28-f121244db839"><con:settings/><con:parameters><con:parameter><con:name>/getAll</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>name</con:name><con:style>HEADER</con:style></con:parameter><con:parameter><con:name>rrr</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Get" id="bbd7024a-738f-4c07-93ef-df43455e0d74" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request" id="38de6d52-510f-4b14-b2b2-31b420a07c5d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/goal</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="Goal get all" path="/api/goal/getAll" id="bf6d8677-e7d6-4c38-9d28-f121244db839"><con:settings/><con:parameters/><con:method name="GetAll" id="2a0e1f3d-3cea-4e2b-9ef4-f01641e31884" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request" id="ad08e8e4-f156-4f9a-b8fc-c5a27a0e4e79" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/goal</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="Goal get id" path="/api/goal/db34c393-8027-7502-a9e4-e94a9b7fba23" id="bf6d8677-e7d6-4c38-9d28-f121244db839"><con:settings/><con:parameters/><con:method name="GetId" id="a10d6d43-096c-4d22-b76d-5c51dbd56fa7" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:db3="http://localhost/api/goal/db34c393-8027-7502-a9e4-e94a9b7fba23">db3:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request" id="f1da8dd5-db1a-4791-9ceb-9fdbe664dcbd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/goal/db34c393-8027-7502-a9e4-e94a9b7fba23</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="Goal create" path="/api/goal/" id="bf6d8677-e7d6-4c38-9d28-f121244db839"><con:settings/><con:parameters/><con:method name="Create" id="5a3dbdf8-b66d-4690-9e33-7b879a592eb1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/problem+json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:goal="http://localhost/api/goal/">goal:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400 415</con:status><con:params/><con:element xmlns:goal="http://localhost/api/goal/">goal:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405 406</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>text/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/mixed</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:goal="http://localhost/api/goal/">goal:Response</con:element></con:representation><con:request name="Request" id="9f935850-1720-4b78-bf40-c28371ba2783" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request>	{
		"Name" : "knowledge user Regional Court"
	}</con:request><con:originalUri>http://localhost/api/goal/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="Goal update" path="/api/goal/" id="bf6d8677-e7d6-4c38-9d28-f121244db839"><con:settings/><con:parameters/><con:method name="Update" id="c45a3ef4-407f-45ca-b2ad-10934ce3817e" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/problem+json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:a8a8="http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f">a8a8:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:a8a8="http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f">a8a8:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request" id="8b033853-ef75-479f-a6d3-8fb0cdc5d24a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request>{
   "id": "db34c393-8027-7502-a9e4-e94a9b7fba23",
   "name": "test 000 111",
   "dateCreate": "2020-02-05T08:55:04.483496",
   "dateUpdate": "2020-02-05T08:55:04.483499",
   "done": false
}</con:request><con:originalUri>http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="Goal Delete" path="/api/goal/bac06da3-4ee6-42dc-b776-05cbaba62e99" id="bf6d8677-e7d6-4c38-9d28-f121244db839"><con:settings/><con:parameters/><con:method name="Delete" id="c45a3ef4-407f-45ca-b2ad-10934ce3817e" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/problem+json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:a8a8="http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f">a8a8:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:a8a8="http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f">a8a8:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request" id="8b033853-ef75-479f-a6d3-8fb0cdc5d24a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="Goal Done" path="/api/goal/done/db34c393-8027-7502-a9e4-e94a9b7fba23" id="bf6d8677-e7d6-4c38-9d28-f121244db839"><con:settings/><con:parameters/><con:method name="Done" id="c45a3ef4-407f-45ca-b2ad-10934ce3817e" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/problem+json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:a8a8="http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f">a8a8:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:a8a8="http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f">a8a8:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request" id="8b033853-ef75-479f-a6d3-8fb0cdc5d24a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource></con:interface><con:testSuite id="27697b27-45fa-472a-bea3-7a324eda7441" name="http://localhost:55673 TestSuite"><con:description>TestSuite generated for REST Service [http://localhost:55673]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="4af0f17d-5cae-496f-bee2-8c4702600e4d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Weather TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Weather] located at [/api/goal]</con:description><con:settings/><con:testStep type="restrequest" name="Request" id="7d81d918-5218-42e3-8a4a-c20224ca1c39"><con:settings/><con:config service="http://localhost:55673" resourcePath="/api/weather" methodName="Weather" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request" id="b477c21f-b979-4c6a-9993-dfcc8482f625" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/weather</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="94797b19-c512-46fc-bf4d-9d258a9fa3e6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Goal get TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Goal get] located at [/api/goal]</con:description><con:settings/><con:testStep type="restrequest" name="Request" id="52283c41-a972-4675-9bc4-a56fc33ec47e"><con:settings/><con:config service="http://localhost:55673" resourcePath="/api/goal" methodName="Get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request" id="38de6d52-510f-4b14-b2b2-31b420a07c5d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/goal</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="83f967aa-2d37-4f46-9662-8eb1a969c3a5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Goal get all TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Goal get all] located at [/api/goal/getAll]</con:description><con:settings/><con:testStep type="restrequest" name="Request" id="7611a376-620c-4101-8bf7-7c9c4a63db08"><con:settings/><con:config service="http://localhost:55673" resourcePath="/api/goal/getAll" methodName="GetAll" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request" id="ad08e8e4-f156-4f9a-b8fc-c5a27a0e4e79" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/goal</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="dff0207c-f8d2-4663-937c-625b7ec909ec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Goal get id TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Goal get id] located at [/api/goal/04a8a897-210d-40af-9277-2a1750ed902f]</con:description><con:settings/><con:testStep type="restrequest" name="Request" id="07e6b667-2181-46ec-8b11-ac5c71383095"><con:settings/><con:config service="http://localhost:55673" resourcePath="/api/goal/db34c393-8027-7502-a9e4-e94a9b7fba23" methodName="GetId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request" id="f1da8dd5-db1a-4791-9ceb-9fdbe664dcbd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/goal/db34c393-8027-7502-a9e4-e94a9b7fba23</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="36cba2e1-5f46-46f0-9ea2-29a784de4c03" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Goal create TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Goal create] located at [/api/goal/]</con:description><con:settings/><con:testStep type="restrequest" name="Request" id="16cc11d5-54ea-4195-9d8f-1393c399b1ac"><con:settings/><con:config service="http://localhost:55673" resourcePath="/api/goal/" methodName="Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request" id="9f935850-1720-4b78-bf40-c28371ba2783" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request>	{
		"Name" : "knowledge user Regional Court"
	}</con:request><con:originalUri>http://localhost/api/goal/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:loadTest id="e6f3d64c-ea86-4e53-a2a3-9d8e9c082450" name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="6d73c515-9a1f-41cb-8eae-db1871e8be2b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Goal update TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Goal update] located at [/api/goal/]</con:description><con:settings/><con:testStep type="restrequest" name="Request" id="1c459a23-f8ea-4ea7-b4e9-f3e96e19fb9a"><con:settings/><con:config service="http://localhost:55673" resourcePath="/api/goal/" methodName="Update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request" id="8b033853-ef75-479f-a6d3-8fb0cdc5d24a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request>{
   "id": "db34c393-8027-7502-a9e4-e94a9b7fba23",
   "name": "test 000 111",
   "dateCreate": "2020-02-05T08:55:04.483496",
   "dateUpdate": "2020-02-05T08:55:04.483499",
   "done": false
}</con:request><con:originalUri>http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:loadTest id="6ff23c43-77bb-4401-80bb-b18054399d6f" name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>1000</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase id="e69a04ec-e0e2-479c-bc54-7edd6d058ac4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Goal Delete TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Goal Delete] located at [/api/goal/75f5d78f-c490-4808-ac3e-9c583833dfad]</con:description><con:settings/><con:testStep type="restrequest" name="Request" id="d4870a21-ddf9-4b47-85cd-0003f99c4d53"><con:settings/><con:config service="http://localhost:55673" resourcePath="/api/goal/bac06da3-4ee6-42dc-b776-05cbaba62e99" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request" id="8b033853-ef75-479f-a6d3-8fb0cdc5d24a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d2be3d39-fbcb-4c29-8541-735e4638aa16" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Goal Done TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [Goal Done] located at [/api/goal/done/db34c393-8027-7502-a9e4-e94a9b7fba23]</con:description><con:settings/><con:testStep type="restrequest" name="Request" id="15633046-312c-4883-ad6c-70fcdcb829d9"><con:settings/><con:config service="http://localhost:55673" resourcePath="/api/goal/done/db34c393-8027-7502-a9e4-e94a9b7fba23" methodName="Done" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request" id="8b033853-ef75-479f-a6d3-8fb0cdc5d24a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:55673</con:endpoint><con:request/><con:originalUri>http://localhost/api/goal/04a8a897-210d-40af-9277-2a1750ed902f</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="ac98992f-e911-418a-96f0-a71150d4c901" port="55673" path="/" host="DESKTOP-9N46IGL" name="REST API MockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/api/weather" method="GET" resourcePath="/api/weather" id="06dc3388-c3f6-4ffc-b7e5-4fb7a7ec87d2"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2f4c5826-52c9-4ced-85f4-da2e21ffc3d3" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/api/goal" method="GET" resourcePath="/api/goal" id="d547b945-adc6-4d7f-8d71-1903aae3ea46"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Get response" id="3716d509-b8cf-4c94-930e-0258851134f7" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
      {
      "id": "38874b7d-ef81-4895-b86f-f718c4a81544",
      "name": "Plastic morph Balanced",
      "dateCreate": "1997-01-15T21:54:29.920099",
      "dateUpdate": "1997-01-28T22:29:44.035771",
      "done": false
   },
      {
      "id": "735f337f-755a-4db6-19ef-a092f0c82c8c",
      "name": "Trail Handcrafted Granite Chicken Shores",
      "dateCreate": "1997-01-16T00:30:24.257496",
      "dateUpdate": "1997-01-26T10:41:03.225911",
      "done": false
   },
      {
      "id": "a5cdb24b-d87a-b0c4-6116-83d2a8fb9e95",
      "name": "Officer Gorgeous Granite Shirt Awesome",
      "dateCreate": "1997-01-14T12:17:55.747877",
      "dateUpdate": "1997-01-26T02:28:33.003802",
      "done": false
   },
      {
      "id": "c629c110-7bbe-c5fd-d4f2-ebe9ec043faf",
      "name": "JSON Directives transmitting",
      "dateCreate": "1997-01-09T10:04:53.854494",
      "dateUpdate": "1997-01-19T09:59:00.32505",
      "done": false
   },
      {
      "id": "b4c95692-e574-d64c-f92f-29d8d35e57fd",
      "name": "SCSI Alabama Technician",
      "dateCreate": "1997-01-28T10:57:23.32315",
      "dateUpdate": "1997-01-17T12:44:34.241521",
      "done": false
   },
      {
      "id": "db34c393-8027-7502-a9e4-e94a9b7fba23",
      "name": "knowledge user Regional Court",
      "dateCreate": "1997-01-04T17:43:51.1943",
      "dateUpdate": "1997-01-15T04:18:51.596189",
      "done": false
   },
      {
      "id": "c876b831-3f7a-5579-20ee-15c853c76c29",
      "name": "Metal Maine Oregon",
      "dateCreate": "1997-01-31T14:40:21.841458",
      "dateUpdate": "1997-01-15T03:38:51.856237",
      "done": false
   },
      {
      "id": "bc5898a9-aee7-9ce5-9adb-83ff0d369182",
      "name": "bandwidth Tasty Soft Bike virtual",
      "dateCreate": "1997-01-23T16:03:03.870309",
      "dateUpdate": "1997-01-11T01:00:19.752244",
      "done": false
   },
      {
      "id": "baad8c67-8711-90bf-64c4-c9f010a3de94",
      "name": "tertiary Rubber Rue",
      "dateCreate": "1997-01-28T11:13:33.461361",
      "dateUpdate": "1997-01-10T12:52:27.480957",
      "done": false
   },
      {
      "id": "45e23002-7388-3d52-05c3-6ab1b15af84d",
      "name": "dynamic ADP US Dollar",
      "dateCreate": "1997-01-22T23:02:09.346242",
      "dateUpdate": "1997-01-09T07:31:01.684248",
      "done": false
   },
      {
      "id": "c4d0a4a2-64b4-9e2c-6108-5d6e727852be",
      "name": "SAS Cambridgeshire Manager",
      "dateCreate": "1997-01-20T15:51:43.844748",
      "dateUpdate": "1997-01-08T13:47:27.97221",
      "done": false
   },
      {
      "id": "041d58e2-63fb-e273-9dc1-f87dd34cfb4d",
      "name": "Investor Mall Plain",
      "dateCreate": "1997-01-14T19:34:49.97275",
      "dateUpdate": "1997-01-08T06:43:42.357865",
      "done": false
   },
      {
      "id": "8efb291d-1e4c-720b-bd0a-1d3af88aa52d",
      "name": "circuit transmitter analyzing",
      "dateCreate": "1997-01-03T08:43:49.74726",
      "dateUpdate": "1997-01-07T19:13:17.452784",
      "done": false
   },
      {
      "id": "a1a64930-7b03-2d40-1e7a-0e619f7a7183",
      "name": "lime Brooks 6th generation",
      "dateCreate": "1997-01-13T19:34:03.300302",
      "dateUpdate": "1997-01-07T10:10:02.0731",
      "done": false
   },
      {
      "id": "e82a27c5-e77b-a400-c30b-7186c15a654a",
      "name": "JBOD implement real-time",
      "dateCreate": "1997-01-12T23:42:40.242332",
      "dateUpdate": "1997-01-03T21:59:15.583004",
      "done": false
   },
      {
      "id": "f017654b-ccd9-f1f4-5672-b5699171bcd6",
      "name": "monitor SQL networks",
      "dateCreate": "1997-01-30T19:33:59.212454",
      "dateUpdate": "1997-01-01T18:09:25.863829",
      "done": false
   },
      {
      "id": "da776514-0e56-c4e5-2543-17c6171956b2",
      "name": "Markets cross-platform secondary",
      "dateCreate": "1997-01-18T04:26:48.731561",
      "dateUpdate": "1997-01-01T05:01:22.705185",
      "done": false
   }
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/goal/getAll" method="GET" resourcePath="/api/goal/getAll" id="bc4aa30a-0c15-4ef6-a887-3a1bdaccc7d0"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Get all response" id="b9569974-0eed-42ae-b090-671d298e7f0c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
      {
      "id": "c55940df-c000-c450-1601-5e9aa3ed8bbc",
      "name": "driver Officer Holy See (Vatican City State)",
      "dateCreate": "1997-01-13T02:08:14.756456",
      "dateUpdate": "1997-01-29T18:59:41.684245",
      "done": true
   },
      {
      "id": "38874b7d-ef81-4895-b86f-f718c4a81544",
      "name": "Plastic morph Balanced",
      "dateCreate": "1997-01-15T21:54:29.920099",
      "dateUpdate": "1997-01-28T22:29:44.035771",
      "done": false
   },
      {
      "id": "7dc7631d-3f1e-f8bb-166c-63b52a05db21",
      "name": "Ports Rupiah Awesome",
      "dateCreate": "1997-01-13T23:07:22.848384",
      "dateUpdate": "1997-01-27T16:35:23.823537",
      "done": true
   },
      {
      "id": "0037c991-eb6d-2819-491c-221a1c9c01a8",
      "name": "matrix Stravenue Usability",
      "dateCreate": "1997-01-06T11:03:38.286677",
      "dateUpdate": "1997-01-26T17:58:46.010328",
      "done": true
   },
      {
      "id": "735f337f-755a-4db6-19ef-a092f0c82c8c",
      "name": "Trail Handcrafted Granite Chicken Shores",
      "dateCreate": "1997-01-16T00:30:24.257496",
      "dateUpdate": "1997-01-26T10:41:03.225911",
      "done": false
   },
      {
      "id": "a5cdb24b-d87a-b0c4-6116-83d2a8fb9e95",
      "name": "Officer Gorgeous Granite Shirt Awesome",
      "dateCreate": "1997-01-14T12:17:55.747877",
      "dateUpdate": "1997-01-26T02:28:33.003802",
      "done": false
   },
      {
      "id": "85448040-d13d-0123-bb35-d55efa40caaa",
      "name": "online Fresh payment",
      "dateCreate": "1997-01-10T12:23:01.060524",
      "dateUpdate": "1997-01-25T04:51:03.773962",
      "done": true
   },
      {
      "id": "1e80c504-8b88-f90a-36c3-ac9dac29be5f",
      "name": "Metal black Executive",
      "dateCreate": "1997-01-04T22:26:01.344321",
      "dateUpdate": "1997-01-24T00:21:13.280843",
      "done": true
   },
      {
      "id": "c4e9f0c7-0c4a-4f3f-bdd7-84eedb7671f1",
      "name": "Persevering grow Ergonomic Steel Chicken",
      "dateCreate": "1997-01-28T18:59:31.872349",
      "dateUpdate": "1997-01-23T22:43:14.926967",
      "done": true
   },
      {
      "id": "e1e05c39-ffc9-2b7f-b318-787a8f4913fb",
      "name": "pricing structure red withdrawal",
      "dateCreate": "1997-01-31T10:10:19.8102",
      "dateUpdate": "1997-01-22T11:41:08.272663",
      "done": true
   },
      {
      "id": "2f7c098a-b349-3662-5e35-e53f2202550d",
      "name": "instruction set Kyat blue",
      "dateCreate": "1997-01-08T15:51:41.593985",
      "dateUpdate": "1997-01-22T04:41:16.749143",
      "done": true
   },
      {
      "id": "1667fd89-b6e3-a8b7-e9ef-30f74878b5b7",
      "name": "Bedfordshire index Mobility",
      "dateCreate": "1997-01-13T21:42:08.572078",
      "dateUpdate": "1997-01-20T21:36:02.076581",
      "done": true
   },
      {
      "id": "ec59e6df-a1c0-9739-9010-33f8a6afe991",
      "name": "Nauru Taka Business-focused",
      "dateCreate": "1997-01-30T19:07:02.203602",
      "dateUpdate": "1997-01-20T09:54:38.069301",
      "done": true
   },
      {
      "id": "306e5bcd-0dfb-0b6a-7e3c-0e3b4c2cf675",
      "name": "Bedfordshire heuristic West Virginia",
      "dateCreate": "1997-01-08T01:37:13.803885",
      "dateUpdate": "1997-01-19T13:23:00.429375",
      "done": true
   },
      {
      "id": "c629c110-7bbe-c5fd-d4f2-ebe9ec043faf",
      "name": "JSON Directives transmitting",
      "dateCreate": "1997-01-09T10:04:53.854494",
      "dateUpdate": "1997-01-19T09:59:00.32505",
      "done": false
   },
      {
      "id": "03e989a7-5e72-9cc4-faa1-06532e86aa2a",
      "name": "haptic parse Auto Loan Account",
      "dateCreate": "1997-01-27T23:46:40.875506",
      "dateUpdate": "1997-01-19T03:22:40.484358",
      "done": true
   },
      {
      "id": "b4c95692-e574-d64c-f92f-29d8d35e57fd",
      "name": "SCSI Alabama Technician",
      "dateCreate": "1997-01-28T10:57:23.32315",
      "dateUpdate": "1997-01-17T12:44:34.241521",
      "done": false
   },
      {
      "id": "3f3fbd89-6758-a554-0424-efd1f17a2f0c",
      "name": "haptic Rustic Plastic Shoes Borders",
      "dateCreate": "1997-01-11T10:38:12.920136",
      "dateUpdate": "1997-01-15T15:25:06.218007",
      "done": true
   },
      {
      "id": "db34c393-8027-7502-a9e4-e94a9b7fba23",
      "name": "knowledge user Regional Court",
      "dateCreate": "1997-01-04T17:43:51.1943",
      "dateUpdate": "1997-01-15T04:18:51.596189",
      "done": false
   },
      {
      "id": "c876b831-3f7a-5579-20ee-15c853c76c29",
      "name": "Metal Maine Oregon",
      "dateCreate": "1997-01-31T14:40:21.841458",
      "dateUpdate": "1997-01-15T03:38:51.856237",
      "done": false
   },
      {
      "id": "0fb1ec9c-f517-4562-ecd0-baf3d7453cda",
      "name": "Metrics France Burkina Faso",
      "dateCreate": "1997-01-07T22:27:39.880137",
      "dateUpdate": "1997-01-13T10:36:15.034636",
      "done": true
   },
      {
      "id": "bc5898a9-aee7-9ce5-9adb-83ff0d369182",
      "name": "bandwidth Tasty Soft Bike virtual",
      "dateCreate": "1997-01-23T16:03:03.870309",
      "dateUpdate": "1997-01-11T01:00:19.752244",
      "done": false
   },
      {
      "id": "baad8c67-8711-90bf-64c4-c9f010a3de94",
      "name": "tertiary Rubber Rue",
      "dateCreate": "1997-01-28T11:13:33.461361",
      "dateUpdate": "1997-01-10T12:52:27.480957",
      "done": false
   },
      {
      "id": "45e23002-7388-3d52-05c3-6ab1b15af84d",
      "name": "dynamic ADP US Dollar",
      "dateCreate": "1997-01-22T23:02:09.346242",
      "dateUpdate": "1997-01-09T07:31:01.684248",
      "done": false
   },
      {
      "id": "c4d0a4a2-64b4-9e2c-6108-5d6e727852be",
      "name": "SAS Cambridgeshire Manager",
      "dateCreate": "1997-01-20T15:51:43.844748",
      "dateUpdate": "1997-01-08T13:47:27.97221",
      "done": false
   },
      {
      "id": "02da9c9f-4aee-e5f6-e930-b10568e864d3",
      "name": "wireless Books content-based",
      "dateCreate": "1997-01-12T20:32:15.966775",
      "dateUpdate": "1997-01-08T09:59:38.355944",
      "done": true
   },
      {
      "id": "041d58e2-63fb-e273-9dc1-f87dd34cfb4d",
      "name": "Investor Mall Plain",
      "dateCreate": "1997-01-14T19:34:49.97275",
      "dateUpdate": "1997-01-08T06:43:42.357865",
      "done": false
   },
      {
      "id": "8efb291d-1e4c-720b-bd0a-1d3af88aa52d",
      "name": "circuit transmitter analyzing",
      "dateCreate": "1997-01-03T08:43:49.74726",
      "dateUpdate": "1997-01-07T19:13:17.452784",
      "done": false
   },
      {
      "id": "a1a64930-7b03-2d40-1e7a-0e619f7a7183",
      "name": "lime Brooks 6th generation",
      "dateCreate": "1997-01-13T19:34:03.300302",
      "dateUpdate": "1997-01-07T10:10:02.0731",
      "done": false
   },
      {
      "id": "85a297d9-6074-b96d-1cd1-f25d99c01b65",
      "name": "Avon Island world-class",
      "dateCreate": "1997-01-16T04:38:53.621333",
      "dateUpdate": "1997-01-06T12:58:32.015693",
      "done": true
   },
      {
      "id": "81392f27-da42-3110-b600-15c06aca4e58",
      "name": "solid state budgetary management Facilitator",
      "dateCreate": "1997-01-25T13:58:58.819399",
      "dateUpdate": "1997-01-06T07:20:19.523257",
      "done": true
   },
      {
      "id": "3aa0ff20-ab7c-b0de-e658-76ebb183c850",
      "name": "International Kina Games, Beauty &amp; Jewelery",
      "dateCreate": "1997-01-20T23:53:57.016171",
      "dateUpdate": "1997-01-05T16:33:55.425948",
      "done": true
   },
      {
      "id": "8a3a1de4-7e59-33b0-d25f-6864ebc34da1",
      "name": "Global networks District",
      "dateCreate": "1997-01-22T17:24:32.893683",
      "dateUpdate": "1997-01-05T03:59:27.904935",
      "done": true
   },
      {
      "id": "89c40685-7735-8685-71f0-dd83757a570f",
      "name": "Practical Unbranded Utah",
      "dateCreate": "1997-01-06T13:38:08.554725",
      "dateUpdate": "1997-01-04T14:10:57.72075",
      "done": true
   },
      {
      "id": "e82a27c5-e77b-a400-c30b-7186c15a654a",
      "name": "JBOD implement real-time",
      "dateCreate": "1997-01-12T23:42:40.242332",
      "dateUpdate": "1997-01-03T21:59:15.583004",
      "done": false
   },
      {
      "id": "57a7d699-c055-657b-cfde-99826323d03a",
      "name": "Tokelau navigate Fundamental",
      "dateCreate": "1997-01-12T15:08:57.209905",
      "dateUpdate": "1997-01-03T13:03:12.135558",
      "done": true
   },
      {
      "id": "448976b5-0f7d-6280-0c25-556ffcab049d",
      "name": "background Garden Handmade",
      "dateCreate": "1997-01-19T12:58:11.732762",
      "dateUpdate": "1997-01-02T20:42:04.746965",
      "done": true
   },
      {
      "id": "ea0ff7e6-805e-f8f9-42b3-ef384fc457aa",
      "name": "Granite quantify PNG",
      "dateCreate": "1997-01-09T14:55:54.461465",
      "dateUpdate": "1997-01-02T06:59:16.926645",
      "done": true
   },
      {
      "id": "f017654b-ccd9-f1f4-5672-b5699171bcd6",
      "name": "monitor SQL networks",
      "dateCreate": "1997-01-30T19:33:59.212454",
      "dateUpdate": "1997-01-01T18:09:25.863829",
      "done": false
   },
      {
      "id": "da776514-0e56-c4e5-2543-17c6171956b2",
      "name": "Markets cross-platform secondary",
      "dateCreate": "1997-01-18T04:26:48.731561",
      "dateUpdate": "1997-01-01T05:01:22.705185",
      "done": false
   }
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/goal/97e2898b-189c-4a87-af33-6761ee950f35" method="GET" resourcePath="/api/goal/db34c393-8027-7502-a9e4-e94a9b7fba23" id="46ac55d4-1dd5-456e-9493-00ddada0ecaf"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Get id response" id="261bd042-824e-41f9-be32-d328ece9f50c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
   "id": "db34c393-8027-7502-a9e4-e94a9b7fba23",
   "name": "knowledge user Regional Court",
   "dateCreate": "1997-01-04T17:43:51.1943",
   "dateUpdate": "1997-01-15T04:18:51.596189",
   "done": false
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/goal/" method="POST" resourcePath="/api/goal/" id="ae101eba-4c7c-44c2-975b-c1e350318a13"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Create response" id="ddd6a86a-b79f-4063-a842-5571a2a8489e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
   "id": "bac06da3-4ee6-42dc-b776-05cbaba62eaf",
   "name": "knowledge user Regional Court",
   "dateCreate": "2020-02-05T16:59:15.9162887Z",
   "dateUpdate": "2020-02-05T16:59:15.9162893Z",
   "done": false
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/goal/" method="PUT" resourcePath="/api/goal/" id="f884a601-d39a-40c1-b140-f4770090a3d2"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Update response" id="b4c8f44e-88b6-4cfa-81a0-6f9c495f7569" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/api/goal/754e599d-0099-4a3e-bd39-f33ebb32fec6" method="DELETE" resourcePath="/api/goal/" id="063ef43e-66fe-4238-8c82-5df7e25c6b55"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Delete response" id="89123538-4660-4d81-90c5-d28ca6f62acd" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/api/goal/done/db34c393-8027-7502-a9e4-e94a9b7fba23" method="PUT" resourcePath="/api/goal/done/db34c393-8027-7502-a9e4-e94a9b7fba23" id="81924fad-6b93-4a49-b965-aa62cc1d5009"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Done response" id="f19e6283-e831-415f-a563-da0262971ca2" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>