<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="27d811cb-a663-452c-9da9-0a48eb147da6" activeEnvironment="Default" name="REST Smart House" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:RestService" id="70c69a5c-5753-475f-bdb8-44ed28ed775b" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:555444" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>http://localhost:5544</con:endpoint>
    </con:endpoints>
    <con:resource name="" path="" id="4b4fe883-b74c-4706-954e-860a5d3c0e15">
      <con:settings/>
      <con:parameters/>
      <con:method name="1" id="beafefd6-cd3b-4eaf-9cec-68fcdc365602" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="af8e3b82-2d3a-4553-9a09-7292797244e0" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://localhost:5544</con:endpoint>
          <con:request/>
          <con:originalUri>http://localhost/</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:restMockService id="342b5d39-9d9b-44bf-b964-610ade00f286" port="55673" path="/" host="DESKTOP-9N46IGL" name="REST Mock HTTP Smart House Weather" docroot="">
    <con:settings/>
    <con:properties/>
    <con:onRequestScript/>
    <con:restMockAction name="api/weather" method="GET" resourcePath="/api/weather" id="2acdfe5e-a28f-48e2-af5d-1e1294b94036">
      <con:settings/>
      <con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>
        /*
        // Script dispatcher is used to select a response based on the incoming request.
        // Here are few examples showing how to match based on path, query param, header and body

        // Match based on path
        def requestPath = mockRequest.getPath()
        log.info "Path: "+ requestPath

        if( requestPath.contains("json") )
        {
        // return the name of the response you want to dispatch
        return "JSON Response"
        }


        // Match based on query parameter
        def queryString = mockRequest.getRequest().getQueryString()
        log.info "QueryString: " + queryString

        if( queryString.contains("stockholm") )
        {
        // return the name of the response you want to dispatch
        return "Response Stockholm"
        }
        else if( queryString.contains("london") )
        {
        // return the name of the response you want to dispatch
        return "Response London"
        }


        // Match based on header
        def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
        log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

        if( acceptEncodingHeaderList.contains("gzip,deflate") )
        {
        // return the name of the response you want to dispatch
        return "GZiped Response"
        }


        // Match based on body
        def requestBody = mockRequest.getRequestContent()
        log.info "Request body: " + requestBody

        if( requestBody.contains("some data") )
        {
        // return the name of the response you want to dispatch
        return "Response N"
        }
        */
      </con:dispatchPath>
      <con:response name="Response Default" id="4ba38546-7fa6-4ddf-a3b6-c790ac14cab1" httpResponseStatus="200" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{ "SpeedWind":"15", "Temp":"-10"}</con:responseContent>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="CORS" method="OPTIONS" resourcePath="/" id="7b6fdfe3-c4e8-43eb-9036-9580adbde8c6">
      <con:settings/>
      <con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchPath>
        /*
        // Script dispatcher is used to select a response based on the incoming request.
        // Here are few examples showing how to match based on path, query param, header and body

        // Match based on path
        def requestPath = mockRequest.getPath()
        log.info "Path: "+ requestPath

        if( requestPath.contains("json") )
        {
        // return the name of the response you want to dispatch
        return "JSON Response"
        }


        // Match based on query parameter
        def queryString = mockRequest.getRequest().getQueryString()
        log.info "QueryString: " + queryString

        if( queryString.contains("stockholm") )
        {
        // return the name of the response you want to dispatch
        return "Response Stockholm"
        }
        else if( queryString.contains("london") )
        {
        // return the name of the response you want to dispatch
        return "Response London"
        }


        // Match based on header
        def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
        log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

        if( acceptEncodingHeaderList.contains("gzip,deflate") )
        {
        // return the name of the response you want to dispatch
        return "GZiped Response"
        }


        // Match based on body
        def requestBody = mockRequest.getRequestContent()
        log.info "Request body: " + requestBody

        if( requestBody.contains("some data") )
        {
        // return the name of the response you want to dispatch
        return "Response N"
        }
        */
      </con:dispatchPath>
      <con:response name="Response" id="0b4e7bbd-6dde-46bb-b1c7-ac962c2a2bb5" httpResponseStatus="200">
        <con:settings/>
        <con:script/>
        <con:responseContent/>
        <con:header>
          <con:name>Access-Control-Allow-Methods</con:name>
          <con:value>GET, POST, OPTIONS, HEAD, PUT ,DELETE</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
  </con:restMockService>
  <con:properties/>
  <con:wssContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
</con:soapui-project>